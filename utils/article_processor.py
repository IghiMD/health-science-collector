#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Modul pre s≈•ahovanie a spracovanie ƒçl√°nkov zo zdravotn√≠ckych a vedeck√Ωch zdrojov.
Implementuje s≈•ahovanie, extrakciu, preklad do slovenƒçiny a ≈°tyliz√°ciu textov.
"""

import requests
import logging
import re
from typing import Dict, List, Optional, Tuple
from bs4 import BeautifulSoup
from newspaper import Article
import openai
import os
# Naƒç√≠tanie premenn√Ωch z .env s√∫boru
from dotenv import load_dotenv
load_dotenv()  # toto naƒç√≠ta premenn√© z .env s√∫boru do prostredia
from datetime import datetime

# Konfigur√°cia loggeru
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/article_processor.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("article_processor")

# Naƒç√≠tanie API kƒæ√∫ƒçov z prostredia
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY_IGHI")  # Upraven√© podƒæa v√°≈°ho .env
if not OPENAI_API_KEY:
    # Sk√∫s alternat√≠vny kƒæ√∫ƒç
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY_TASR")
    if not OPENAI_API_KEY:
        logger.warning("≈Ωiadny OPENAI_API_KEY nie je nastaven√Ω v prostred√≠!")

# Konfigur√°cia OpenAI
openai.api_key = OPENAI_API_KEY

# Naƒç√≠tanie ƒèal≈°√≠ch API kƒæ√∫ƒçov, ktor√© m√¥≈æu by≈• potrebn√©
GOOGLE_TRANSLATE_API_KEY = os.getenv("GOOGLE_TRANSLATE_API_KEY")
DEEPL_API_KEY = os.getenv("DEEPL_API_KEY")  # Alternat√≠vny prekladaƒç
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")  # Alternat√≠vny AI model

# Naƒç√≠tanie AI promptu pre sumariz√°ciu
AI_PROMPT_PATH = "ai_sumar_prompt.txt"
try:
    with open(AI_PROMPT_PATH, 'r', encoding='utf-8') as f:
        AI_SUMMARY_PROMPT = f.read()
except Exception as e:
    logger.error(f"Chyba pri naƒç√≠tan√≠ AI promptu: {str(e)}")
    AI_SUMMARY_PROMPT = """
    üß† AI Prompt na generovanie sarkastick√©ho, medic√≠nsky korektn√©ho a vir√°lneho AI sum√°ru (≈°t√Ωl ‚Äûpikosky do r√°dia")

    P√¥sob√≠≈° ako inteligentn√Ω koment√°tor s ironick√Ωm nadhƒæadom a sk√∫senos≈•ami v oblasti medic√≠ny a m√©di√≠. Na z√°klade nasledovn√©ho ƒçl√°nku vytvor dve jasne oddelen√© ƒçasti:

    1. **Sarkastick√Ω a vir√°lny sum√°r (cca 6‚Äì8 viet)**  
    Tvoj cieƒæ je pobavi≈•, zauja≈• a z√°rove≈à edukova≈•. Pou≈æi ƒçierny humor, trefn√© prirovnania, klikbaitov√Ω jazyk ‚Äì ale v≈ædy buƒè medic√≠nsky korektn√Ω. Tento sum√°r by mal zauja≈• pozornos≈• u≈æ po prvej vete, by≈• vhodn√Ω na ƒç√≠tanie v r√°diu ako r√Ωchla ‚Äûpikoska" ƒçi zauj√≠mavos≈•, ktor√∫ si ƒæudia zapam√§taj√∫. Vyhni sa infantilnosti ‚Äì cieli≈° na dospel√©ho, inteligentn√©ho posluch√°ƒça vo veku 20 a≈æ 55 rokov.

    2. **Edukaƒçn√Ω dovetok (1‚Äì2 vety)**  
    Kr√°tke, ale √∫dern√© vysvetlenie alebo doplnenie t√©my. M√¥≈æe≈° prida≈• zauj√≠mav√Ω vedeck√Ω fakt, jednoduch√© vysvetlenie alebo ≈°tatistiku, ktor√° podpor√≠ t√©mu ƒçl√°nku. Mal by to by≈• tak√Ω "racion√°lny ≈°plech", ktor√Ω zakonƒç√≠ spr√°vu s inteligentnou pointou.

    üéØ Cel√Ω v√Ωstup p√≠≈° v slovenƒçine. T√≥n m√° by≈• modern√Ω, ostr√Ω, ale nie √∫toƒçn√Ω. M√¥≈æe≈° by≈• provokat√≠vny, ale nikdy lacno ≈°okuj√∫ci.

    V√Ωstup m√° by≈• vhodn√Ω do podcastu, r√°dia alebo vir√°lneho statusu na webe.
    """

class ArticleProcessor:
    """Trieda pre spracovanie ƒçl√°nkov."""
    
    def __init__(self):
        """Inicializ√°cia procesora ƒçl√°nkov."""
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        }
    
    def download_article(self, url: str) -> Optional[Article]:
        """
        Stiahne a spracuje ƒçl√°nok pomocou kni≈ænice newspaper3k.
        
        Args:
            url: URL adresa ƒçl√°nku.
            
        Returns:
            Objekt Article alebo None v pr√≠pade chyby.
        """
        try:
            article = Article(url)
            article.download()
            article.parse()
            return article
        except Exception as e:
            logger.error(f"Chyba pri s≈•ahovan√≠ ƒçl√°nku z {url}: {str(e)}")
            return None
    
    def extract_article_info(self, article: Article) -> Dict:
        """
        Extrahuje inform√°cie z ƒçl√°nku.
        
        Args:
            article: Objekt Article.
            
        Returns:
            Dictionary s inform√°ciami o ƒçl√°nku.
        """
        return {
            'title': article.title,
            'text': article.text,
            'publish_date': article.publish_date,
            'authors': article.authors,
            'top_image': article.top_image,
            'url': article.url,
            'source_url': article.source_url,
            'keywords': article.keywords,
            'summary': article.summary,
            'html': article.html,
            'language': self._detect_language(article.text)
        }
    
    def _detect_language(self, text: str) -> str:
        """
        Detekuje jazyk textu (jednoduch√° implement√°cia).
        
        Args:
            text: Text na detekciu jazyka.
            
        Returns:
            K√≥d jazyka (sk, cs, en, ...).
        """
        # Jednoduch√° detekcia - hƒæad√°me typick√© ƒçesk√©/slovensk√© znaky
        sk_chars = {'≈æ', '√Ω', '√°', '√≠', '√©', '√∫', '√§', '√¥', '≈à', 'ƒç', '≈•', 'ƒè', 'ƒæ', '≈°', 'ƒ∫', '≈ï', '√≥'}
        cs_chars = {'≈æ', '√Ω', '√°', '√≠', '√©', '√∫', '≈Ø', 'ƒõ', '≈°', 'ƒç', '≈ô', '≈à', '≈•', 'ƒè', '√≥'}
        
        text_lower = text.lower()
        sample = text_lower[:1000]  # Analyzujeme prv√Ωch 1000 znakov
        
        # Kontrola na slovensk√© a ƒçesk√© znaky
        contains_sk = any(char in sample for char in sk_chars)
        contains_cs = any(char in sample for char in cs_chars)
        
        # ≈†pecifick√° kontrola pre slovenƒçinu a ƒçe≈°tinu
        if 'ƒæ' in sample or 'ƒ∫' in sample or '≈ï' in sample or '√¥' in sample or '√§' in sample:
            return 'sk'
        elif '≈ô' in sample or '≈Ø' in sample or 'ƒõ' in sample:
            return 'cs'
        elif contains_sk and contains_cs:
            # ƒéal≈°ia heuristika - typick√© slov√°/koncovky/vzory
            if 'nie je' in text_lower or 'm√¥≈æe' in text_lower or 'bude' in text_lower:
                return 'sk'
            elif 'nen√≠' in text_lower or 'm≈Ø≈æe' in text_lower or 'bude' in text_lower:
                return 'cs'
            else:
                return 'sk'  # Predvolene slovenƒçina
        elif contains_sk:
            return 'sk'
        elif contains_cs:
            return 'cs'
        else:
            # Predpoklad√°me angliƒçtinu alebo in√Ω jazyk
            return 'en'
    
    def translate_to_slovak(self, text: str, source_lang: str) -> str:
        """
        Prelo≈æ√≠ text do slovenƒçiny. Prim√°rne pou≈æ√≠va DeepL, ak zlyh√°, pou≈æije Google Translate.
        
        Args:
            text: Text na preklad.
            source_lang: Zdrojov√Ω jazyk textu.
            
        Returns:
            Prelo≈æen√Ω text.
        """
        if source_lang == 'sk':
            return text  # U≈æ je v slovenƒçine
        
        # Skr√°tenie textu ak je pr√≠li≈° dlh√Ω (pre pr√≠pad API limitov)
        if len(text) > 10000:
            text = text[:10000] + "..."
        
        # 1. Pokus: DeepL (prim√°rna met√≥da)
        if DEEPL_API_KEY:
            try:
                import requests
                headers = {
                    'Authorization': f'DeepL-Auth-Key {DEEPL_API_KEY}',
                    'Content-Type': 'application/json',
                }
                data = {
                    'text': [text],
                    'target_lang': 'SK',
                    'source_lang': source_lang.upper() if source_lang != 'en' else 'EN'
                }
                response = requests.post('https://api.deepl.com/v2/translate', 
                                         headers=headers, 
                                         json=data,
                                         timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    if 'translations' in result and len(result['translations']) > 0:
                        logger.info("Text prelo≈æen√Ω pomocou DeepL API")
                        return result['translations'][0]['text']
                logger.warning(f"DeepL API vr√°tilo chybov√Ω k√≥d: {response.status_code}")
            except Exception as e:
                logger.warning(f"Chyba pri preklade pomocou DeepL: {str(e)}")
        else:
            logger.warning("DEEPL_API_KEY nie je nastaven√Ω, sk√∫≈°am Google Translate")
        
        # 2. Pokus: Google Translate (fallback)
        if GOOGLE_TRANSLATE_API_KEY:
            try:
                import requests
                url = f"https://translation.googleapis.com/language/translate/v2?key={GOOGLE_TRANSLATE_API_KEY}"
                payload = {
                    'q': text,
                    'target': 'sk',
                    'source': source_lang
                }
                response = requests.post(url, json=payload, timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    if 'data' in result and 'translations' in result['data'] and len(result['data']['translations']) > 0:
                        logger.info("Text prelo≈æen√Ω pomocou Google Translate API")
                        return result['data']['translations'][0]['translatedText']
                logger.warning(f"Google Translate API vr√°tilo chybov√Ω k√≥d: {response.status_code}")
            except Exception as e:
                logger.warning(f"Chyba pri preklade pomocou Google Translate: {str(e)}")
        else:
            logger.warning("GOOGLE_TRANSLATE_API_KEY nie je nastaven√Ω, preklad nebude vykonan√Ω")
        
        logger.error("V≈°etky met√≥dy prekladu zlyhali. Vraciam origin√°lny text.")
        return text  # Vraciam origin√°lny text, keƒè zlyhaj√∫ v≈°etky mo≈ænosti
    
    def generate_stylized_summary(self, article_info: Dict) -> Dict:
        """
        Generuje ≈°tylizovan√Ω s√∫hrn ƒçl√°nku podƒæa zadan√©ho promptu.
        Postupne sk√∫≈°a: OpenAI, DeepSeek, Anthropic, Gemini.
        
        Args:
            article_info: Inform√°cie o ƒçl√°nku.
            
        Returns:
            Dictionary s p√¥vodn√Ωmi inform√°ciami a pridan√Ωm ≈°tylizovan√Ωm s√∫hrnom.
        """
        # Zaist√≠me, ≈æe m√°me slovensk√Ω text
        if article_info['language'] != 'sk':
            text_to_process = self.translate_to_slovak(article_info['text'], article_info['language'])
            title_to_process = self.translate_to_slovak(article_info['title'], article_info['language'])
        else:
            text_to_process = article_info['text']
            title_to_process = article_info['title']
        
        # Inicializ√°cia v√Ωsledn√Ωch d√°t
        result = article_info.copy()
        result['stylized_summary'] = ""
        result['summary_text'] = ""
        result['appendix_text'] = ""
        result['processed_date'] = datetime.now()
        result['translated_title'] = title_to_process
        
        # 1. Pokus: OpenAI s prim√°rnym API kƒæ√∫ƒçom
        stylized_summary = None
        
        if OPENAI_API_KEY:  # Pou≈æ√≠vame prim√°rny kƒæ√∫ƒç (OPENAI_API_KEY_IGHI)
            try:
                # Nastav√≠me aktu√°lny kƒæ√∫ƒç
                openai.api_key = OPENAI_API_KEY
                
                # Pou≈æitie OpenAI API na generovanie ≈°tylizovan√©ho s√∫hrnu
                response = openai.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": AI_SUMMARY_PROMPT},
                        {"role": "user", "content": f"ƒål√°nok:\n\nN√°zov: {title_to_process}\n\nObsah:\n{text_to_process}"}
                    ],
                    temperature=0.7,
                    max_tokens=1000
                )
                
                stylized_summary = response.choices[0].message.content
                logger.info("≈†tylizovan√Ω s√∫hrn vygenerovan√Ω pomocou OpenAI prim√°rneho API")
            
            except Exception as e:
                logger.warning(f"Chyba pri generovan√≠ ≈°tylizovan√©ho s√∫hrnu pomocou prim√°rneho OpenAI API: {str(e)}")
        
        # 2. Pokus: OpenAI s alternat√≠vnym API kƒæ√∫ƒçom
        if not stylized_summary and os.getenv("OPENAI_API_KEY_TASR"):
            try:
                # Nastav√≠me alternat√≠vny kƒæ√∫ƒç
                alt_api_key = os.getenv("OPENAI_API_KEY_TASR")
                openai.api_key = alt_api_key
                
                # Pou≈æitie OpenAI API na generovanie ≈°tylizovan√©ho s√∫hrnu
                response = openai.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": AI_SUMMARY_PROMPT},
                        {"role": "user", "content": f"ƒål√°nok:\n\nN√°zov: {title_to_process}\n\nObsah:\n{text_to_process}"}
                    ],
                    temperature=0.7,
                    max_tokens=1000
                )
                
                stylized_summary = response.choices[0].message.content
                logger.info("≈†tylizovan√Ω s√∫hrn vygenerovan√Ω pomocou OpenAI alternat√≠vneho API")
            
            except Exception as e:
                logger.warning(f"Chyba pri generovan√≠ ≈°tylizovan√©ho s√∫hrnu pomocou alternat√≠vneho OpenAI API: {str(e)}")
        
        # 3. Pokus: DeepSeek API
        if not stylized_summary and os.getenv("DEEPSEEK_API_KEY"):
            try:
                import requests
                
                headers = {
                    "Content-Type": "application/json",
                    "Authorization": f"Bearer {os.getenv('DEEPSEEK_API_KEY')}"
                }
                
                data = {
                    "model": "deepseek-chat",
                    "messages": [
                        {"role": "system", "content": AI_SUMMARY_PROMPT},
                        {"role": "user", "content": f"ƒål√°nok:\n\nN√°zov: {title_to_process}\n\nObsah:\n{text_to_process}"}
                    ],
                    "temperature": 0.7,
                    "max_tokens": 1000
                }
                
                response = requests.post(
                    "https://api.deepseek.com/v1/chat/completions",
                    headers=headers,
                    json=data,
                    timeout=60
                )
                
                if response.status_code == 200:
                    response_data = response.json()
                    if "choices" in response_data and len(response_data["choices"]) > 0:
                        stylized_summary = response_data["choices"][0]["message"]["content"]
                        logger.info("≈†tylizovan√Ω s√∫hrn vygenerovan√Ω pomocou DeepSeek API")
                else:
                    logger.warning(f"DeepSeek API vr√°tilo chybov√Ω k√≥d: {response.status_code}")
            
            except Exception as e:
                logger.warning(f"Chyba pri generovan√≠ ≈°tylizovan√©ho s√∫hrnu pomocou DeepSeek API: {str(e)}")
        
        # 4. Pokus: Anthropic API
        if not stylized_summary and os.getenv("ANTHROPIC_API_KEY"):
            try:
                import requests
                
                headers = {
                    "Content-Type": "application/json",
                    "x-api-key": os.getenv("ANTHROPIC_API_KEY"),
                    "anthropic-version": "2023-06-01"
                }
                
                data = {
                    "model": "claude-3-haiku-20240307",
                    "max_tokens": 1000,
                    "temperature": 0.7,
                    "system": AI_SUMMARY_PROMPT,
                    "messages": [
                        {"role": "user", "content": f"ƒål√°nok:\n\nN√°zov: {title_to_process}\n\nObsah:\n{text_to_process}"}
                    ]
                }
                
                response = requests.post(
                    "https://api.anthropic.com/v1/messages",
                    headers=headers,
                    json=data,
                    timeout=60
                )
                
                if response.status_code == 200:
                    response_data = response.json()
                    if "content" in response_data and len(response_data["content"]) > 0:
                        stylized_summary = response_data["content"][0]["text"]
                        logger.info("≈†tylizovan√Ω s√∫hrn vygenerovan√Ω pomocou Anthropic API")
                else:
                    logger.warning(f"Anthropic API vr√°tilo chybov√Ω k√≥d: {response.status_code}")
            
            except Exception as e:
                logger.warning(f"Chyba pri generovan√≠ ≈°tylizovan√©ho s√∫hrnu pomocou Anthropic API: {str(e)}")
        
        # 5. Pokus: Google Gemini API
        if not stylized_summary and os.getenv("GOOGLE_API_KEY"):
            try:
                import requests
                
                headers = {
                    "Content-Type": "application/json"
                }
                
                data = {
                    "contents": [
                        {
                            "parts": [
                                {"text": AI_SUMMARY_PROMPT},
                                {"text": f"ƒål√°nok:\n\nN√°zov: {title_to_process}\n\nObsah:\n{text_to_process}"}
                            ]
                        }
                    ],
                    "generationConfig": {
                        "temperature": 0.7,
                        "maxOutputTokens": 1000
                    }
                }
                
                response = requests.post(
                    f"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key={os.getenv('GOOGLE_API_KEY')}",
                    headers=headers,
                    json=data,
                    timeout=60
                )
                
                if response.status_code == 200:
                    response_data = response.json()
                    if "candidates" in response_data and len(response_data["candidates"]) > 0:
                        if "content" in response_data["candidates"][0] and "parts" in response_data["candidates"][0]["content"]:
                            stylized_summary = response_data["candidates"][0]["content"]["parts"][0]["text"]
                            logger.info("≈†tylizovan√Ω s√∫hrn vygenerovan√Ω pomocou Google Gemini API")
                else:
                    logger.warning(f"Google Gemini API vr√°tilo chybov√Ω k√≥d: {response.status_code}")
            
            except Exception as e:
                logger.warning(f"Chyba pri generovan√≠ ≈°tylizovan√©ho s√∫hrnu pomocou Google Gemini API: {str(e)}")
        
        # Spracovanie v√Ωsledku
        if stylized_summary:
            # Rozdelenie na sum√°r a dovetok
            summary_parts = self._split_summary_and_appendix(stylized_summary)
            
            result['stylized_summary'] = stylized_summary
            result['summary_text'] = summary_parts[0]
            result['appendix_text'] = summary_parts[1]
        else:
            logger.error("V≈°etky pokusy o generovanie ≈°tylizovan√©ho s√∫hrnu zlyhali.")
            # V pr√≠pade zlyhania v≈°etk√Ωch API vytvor√≠me aspo≈à z√°kladn√Ω s√∫hrn
            result['stylized_summary'] = "Generovanie s√∫hrnu zlyhalo. Pros√≠m, preƒç√≠tajte si origin√°lny ƒçl√°nok."
            result['summary_text'] = "Generovanie s√∫hrnu zlyhalo. Pros√≠m, preƒç√≠tajte si origin√°lny ƒçl√°nok."
            result['appendix_text'] = "Generovanie dovetku zlyhalo."
        
        return result
    
    def _split_summary_and_appendix(self, text: str) -> Tuple[str, str]:
        """
        Rozdel√≠ text na sum√°r a dovetok (appendix).
        
        Args:
            text: Text na rozdelenie.
            
        Returns:
            Dvojica (sum√°r, dovetok).
        """
        # Hƒæad√°me edukaƒçn√Ω dovetok, ktory by mal by≈• na konci
        # M√¥≈æe by≈• oznaƒçen√Ω r√¥znymi sp√¥sobmi
        patterns = [
            r'Edukaƒçn√Ω dovetok:(.+)$',
            r'Dovetok:(.+)$',
            r'\*\*Edukaƒçn√Ω dovetok\*\*:(.+)$',
            r'\*\*Edukaƒçn√Ω dovetok\*\* \((.+)\)$'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text, re.DOTALL)
            if match:
                appendix = match.group(1).strip()
                summary = text[:match.start()].strip()
                return summary, appendix
        
        # Ak nen√°jdeme explicitn√© oznaƒçenie, sk√∫sime rozdeli≈• podƒæa blokov textu
        paragraphs = text.split('\n\n')
        if len(paragraphs) >= 2:
            appendix = paragraphs[-1].strip()
            summary = '\n\n'.join(paragraphs[:-1]).strip()
            return summary, appendix
        
        # Ak nie je mo≈æn√© rozdeli≈•, vr√°time cel√Ω text ako sum√°r a pr√°zdny dovetok
        return text.strip(), ""
    
    def process_article(self, url: str) -> Optional[Dict]:
        """
        Kompletne spracuje ƒçl√°nok - stiahne, extrahuje inform√°cie, prelo≈æ√≠ a ≈°tylizuje.
        
        Args:
            url: URL adresa ƒçl√°nku.
            
        Returns:
            Dictionary so v≈°etk√Ωmi inform√°ciami o spracovanom ƒçl√°nku alebo None v pr√≠pade chyby.
        """
        logger.info(f"Spracov√°vam ƒçl√°nok: {url}")
        
        # Stiahnutie ƒçl√°nku
        article = self.download_article(url)
        if not article:
            return None
        
        # Extrakcia inform√°ci√≠
        article_info = self.extract_article_info(article)
        
        # Generovanie ≈°tylizovan√©ho s√∫hrnu
        result = self.generate_stylized_summary(article_info)
        
        logger.info(f"ƒål√°nok √∫spe≈°ne spracovan√Ω: {article_info['title']}")
        return result

# Pr√≠klad pou≈æitia
if __name__ == "__main__":
    processor = ArticleProcessor()
    test_url = "https://www.zdravezpravy.cz/2023/05/01/vedci-objevili-novy-zpusob-jak-lepe-diagnostikovat-rakovinu/"
    result = processor.process_article(test_url)
    
    if result:
        print(f"N√°zov: {result['title']}")
        print(f"Jazyk: {result['language']}")
        print("\n≈†tylizovan√Ω s√∫hrn:")
        print(result['stylized_summary'])